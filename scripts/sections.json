{
  "backbone_01": [
    {"range": [1,23], "types": ["backbone", "fetch"],
    "notes": "<div class='label label-primary'>Fetch</div> the data with a Backbone <code>Collection</code>, as the data is an array.<br>Specify the <code>url</code> where the data lives, and call <code>fetch</code> on the Collection later on in the code.<br><br>Write some functions to crunch the data, which the Backbone <code>View</code> will use.<br><br>(This is also where all the validation code will also ideally go, but have been omitted for concision and laziness.)"},
    {"range": [24,28], "types": ["backbone", "render"]},
    {"range": [29,29], "types": ["backbone", "update"],
    "notes": "Whenever the collection <div class='label label-info'>update</div>s, re-<code>render</code>."},
    {"range": [30,67], "types": ["backbone", "render"],
    "notes": "<br><br><br>Ask <code>Collection</code> for the hours the party starts from and goes until and <div class='label label-success'>render</div> them as buttons with <code>renderTime</code>.<br><br>Then ask <code>Collection</code> for the partiers in the party at the given time.  <div class='label label-success'>Render</div> them as labels."},
    {"range": [68,79], "types": ["backbone", "update"],
    "notes": "When another time is selected, save the selected time and <div class='label label-info'>update</div> by re-<code>render</code>ing."},
    {"range": [80,80], "types": ["backbone", "fetch"],
    "notes": "Instantiate the <code>Collection</code>, because OOP."},
    {"range": [81,84], "types": ["backbone", "render"],
    "notes": "Instantiate the <code>View</code>, because OOP."},
    {"range": [85,85], "types": ["backbone", "fetch"]}
  ],
  "d3_01": [
    {"range": [1,24], "types": ["d3", "fetch"],
    "notes": "<div class='label label-primary'>Fetch</div> party data with <code>d3.json</code>, which passes back the response as a Javascript object.<br><br>The code to calculate the times and attending partiers are almost exactly the same as in the Backbone case."},
    {"range": [25, 72], "types": ["d3", "render"],
    "notes": "Here's where things are different.<br><br>One of the key concepts of D3 is <code>data</code> binding.  We take a set of DOM elements, and bind the first element in the data array to the first in the DOM selection, etc.<br><br>You might have also noticed - there aren't any <code>.partyTime</code> elements that exist at first.  We use <code>enter</code> coupled with <code>append</code> to create as many <code>.partyTime</code> elements as there are extra elements in the data array."},
    {"range": [73,112], "types": ["d3", "update"],
    "notes": "<div class='label label-info'>Updating</div> with D3 is very different also; we use a concept called <code>enter</code>-update-<code>exit</code>.<br><br>With <code>enter</code>, we append the elements in the data that don't exist in the DOM.<br><br>With <code>exit</code>, we <code>remove</code> any DOM elements that no longer exist in the data array.<br><br>And for any changes in attribute, we can use one of the following D3 functions to update: <code>.attr</code>, <code>.style</code>, <code>.text</code>, etc."}
  ],
  "backboned3_01": [
    {"range": [1,69], "types": ["backbone", "fetch"]},
    {"range": [70,136], "types": ["backbone", "render"]},
    {"range": [139,144], "types": ["d3", "render"]},
    {"range": [145,169], "types": ["backbone", "render"]},
    {"range": [170,222], "types": ["d3", "render"]},
    {"range": [223, 244], "types": ["d3", "update"]},
    {"range": [245, 245], "types": ["backbone", "fetch"]},
    {"range": [246, 249], "types": ["backbone", "render"]},
    {"range": [250, 250], "types": ["backbone", "fetch"]}
  ],
  "backboned3_02": [
    {"range": [1,70], "types": ["backbone", "fetch"]},
    {"range": [71,74], "types": ["backbone", "render"]},
    {"range": [75,79], "types": ["d3", "render"]},
    {"range": [80,98], "types": ["backbone", "render"]},
    {"range": [99,102], "types": ["backbone", "update"]},
    {"range": [103,106], "types": ["d3", "update"]},
    {"range": [107,146], "types": ["backbone", "update"]},
    {"range": [147,165], "types": ["d3", "render"]},
    {"range": [166,260], "types": ["d3", "update"]},
    {"range": [261,281], "types": ["d3", "render"]},
    {"range": [282,282], "types": ["backbone", "fetch"]},
    {"range": [283,286], "types": ["backbone", "render"]},
    {"range": [287,287], "types": ["backbone", "fetch"]}
  ],
  "backboned3_03": [
    {"range": [1,96], "types": ["backbone", "fetch"]},
    {"range": [97,101], "types": ["backbone", "render"]},
    {"range": [101,105], "types": ["backbone", "update"]},
    {"range": [106,110], "types": ["d3", "render"]},
    {"range": [111, 127], "types": ["backbone", "render"]},
    {"range": [128,210], "types": ["backbone", "update"]},
    {"range": [211,229], "types": ["d3", "render"]},
    {"range": [230,329], "types": ["d3", "update"]},
    {"range": [330,350], "types": ["d3", "render"]},
    {"range": [351,354], "types": ["backbone", "fetch"]},
    {"range": [355,359], "types": ["backbone", "render"]},
    {"range": [360,360], "types": ["backbone", "fetch"]}
  ]
}